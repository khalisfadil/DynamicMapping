%% file : SFunctionDynamicMapping.tlc
%% 
%% Description:
%%   Simulink Coder TLC Code Generation file for SFunctionDynamicMapping
%% 
%% Simulink version      : 23.2 (R2023b) 01-Aug-2023
%% TLC file generated on : 19-Nov-2024 10:26:00

/%
     %%%-MATLAB_Construction_Commands_Start
     def = legacy_code('initialize');
     def.SFunctionName = 'SFunctionDynamicMapping';
     def.OutputFcnSpec = 'void OutputDynamicMapping(uint32 u1, single u2[128*1024][3], single u3[128*1024][1],single u4[128*1024][1], single u5[128*1024][1],double u6[3][1], uint32 u7, double u8, double u9, double u10[3][1],double u11, uint32 u12, uint32 u13, double u14, double u15, double u16, double u17,double u18, double u19, double u20,double y1[128*1024*10][3], uint32 y2, double y3[128*1024][3], uint32 y4,int32 y5[128*1024*10][3], int32 y6[128*1024*10][3], int32 y7[128*1024*10][3],int32 y8[128*1024*10][3], int32 y9[128*1024][3])';
     def.StartFcnSpec = 'void CreateDynamicMapping()';
     def.TerminateFcnSpec = 'void DeleteDynamicMapping()';
     def.HeaderFiles = {'dynamicMapping.hpp', 'M_occupancyMap.hpp', 'M_clusterExtractor.hpp', 'M_EKFVelocity2D.hpp', 'robin_growth_policy.h', 'robin_hash.h', 'robin_map.h', 'robin_set.h'};
     def.SourceFiles = {'dynamicMapping.cpp', 'M_occupancyMap.cpp', 'M_clusterExtractor.cpp', 'M_EKFVelocity2D.cpp'};
     def.IncPaths = {'/home/khalis/Workspace/SensorSOW/SynologyDrive/Arbeitspakete/MATLAB/Developement/020_DynamicMapping/matlab/library/source/code', '/home/khalis/Workspace/SensorSOW/SynologyDrive/Arbeitspakete/MATLAB/Developement/020_DynamicMapping/matlab/library/source/code/tsl'};
     def.SrcPaths = {'/home/khalis/Workspace/SensorSOW/SynologyDrive/Arbeitspakete/MATLAB/Developement/020_DynamicMapping/matlab/library/source/code', '/home/khalis/Workspace/SensorSOW/SynologyDrive/Arbeitspakete/MATLAB/Developement/020_DynamicMapping/matlab/library/source/code/tsl'};
     def.SampleTime = 'parameterized';
     def.Options.useTlcWithAccel = false;
     def.Options.language = 'C++';
     legacy_code('sfcn_tlc_generate', def);
     %%%-MATLAB_Construction_Commands_End
%/

%implements SFunctionDynamicMapping "C"

%% Function: FcnGenerateUniqueFileName ====================================
%function FcnGenerateUniqueFileName (filename, type) void
    %assign isReserved = TLC_FALSE
    %foreach idxFile = CompiledModel.DataObjectUsage.NumFiles[0]
        %assign thisFile = CompiledModel.DataObjectUsage.File[idxFile]
        %if (thisFile.Name==filename) && (thisFile.Type==type)
            %assign isReserved = TLC_TRUE
            %break
        %endif
    %endforeach
    %if (isReserved==TLC_TRUE)
        %assign filename = FcnGenerateUniqueFileName(filename + "_", type)
    %endif
    %return filename
%endfunction

%% Function: BlockTypeSetup ===============================================
%function BlockTypeSetup (block, system) void

    %% The Target Language must be C++
    %if ::GenCPP==0 && !IsModelReferenceSimTarget()
        %<LibReportFatalError("This S-Function generated by the Legacy Code Tool must be only used with the C++ Target Language")>
    %endif

    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionDynamicMapping_wrapper", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        

        
        #endif
        
        %closefile hFile
        
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionDynamicMapping_wrapper", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "dynamicMapping.hpp"
        #include "M_occupancyMap.hpp"
        #include "M_clusterExtractor.hpp"
        #include "M_EKFVelocity2D.hpp"
        #include "robin_growth_policy.h"
        #include "robin_hash.h"
        #include "robin_map.h"
        #include "robin_set.h"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibAddToCommonIncludes("dynamicMapping.hpp")>
        %<LibAddToCommonIncludes("M_occupancyMap.hpp")>
        %<LibAddToCommonIncludes("M_clusterExtractor.hpp")>
        %<LibAddToCommonIncludes("M_EKFVelocity2D.hpp")>
        %<LibAddToCommonIncludes("robin_growth_policy.h")>
        %<LibAddToCommonIncludes("robin_hash.h")>
        %<LibAddToCommonIncludes("robin_map.h")>
        %<LibAddToCommonIncludes("robin_set.h")>
    %endif
    %<SLibAddToStaticSources("dynamicMapping.cpp")>
    %<SLibAddToStaticSources("M_occupancyMap.cpp")>
    %<SLibAddToStaticSources("M_clusterExtractor.cpp")>
    %<SLibAddToStaticSources("M_EKFVelocity2D.cpp")>
%endfunction

%% Function: BlockInstanceSetup ===========================================
%function BlockInstanceSetup (block, system) void
    %assign int32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_INT32)
    %assign uint32Type = LibGetDataTypeNameFromId(::CompiledModel.tSS_UINT32)
    %assign singleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_SINGLE)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign hFileName = FcnGenerateUniqueFileName("SFunctionDynamicMapping_wrapper_%<sfunInstanceName>", "header")
        %assign hFileNameMacro = FEVAL("upper", hFileName)
        %openfile hFile = "%<hFileName>.h"
        %selectfile hFile
        #ifndef _%<hFileNameMacro>_H_
        #define _%<hFileNameMacro>_H_
        
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif
        
        extern void SFunctionDynamicMapping_wrapper_Start_%<sfunInstanceName>(void);
        extern void SFunctionDynamicMapping_wrapper_Output_%<sfunInstanceName>(const %<uint32Type> u1, const %<singleType>* u2, const %<singleType>* u3, const %<singleType>* u4, const %<singleType>* u5, const %<doubleType>* u6, const %<uint32Type> u7, const %<doubleType> u8, const %<doubleType> u9, const %<doubleType>* u10, const %<doubleType> u11, const %<uint32Type> u12, const %<uint32Type> u13, const %<doubleType> u14, const %<doubleType> u15, const %<doubleType> u16, const %<doubleType> u17, const %<doubleType> u18, const %<doubleType> u19, const %<doubleType> u20,  %<doubleType>* y1,  %<uint32Type> y2,  %<doubleType>* y3,  %<uint32Type> y4,  %<int32Type>* y5,  %<int32Type>* y6,  %<int32Type>* y7,  %<int32Type>* y8,  %<int32Type>* y9);
        extern void SFunctionDynamicMapping_wrapper_Terminate_%<sfunInstanceName>(void);
        
        #endif
        
        %closefile hFile
        
        %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
        %assign cFileName = FcnGenerateUniqueFileName("SFunctionDynamicMapping_wrapper_%<sfunInstanceName>", "source")
        %openfile cFile = "%<cFileName>.cpp"
        %selectfile cFile
        #include <string.h>
        #ifdef MATLAB_MEX_FILE
        #include "tmwtypes.h"
        #else
        %<LibEmitPlatformTypeIncludes()>
        #endif

        #include "dynamicMapping.hpp"
        #include "M_occupancyMap.hpp"
        #include "M_clusterExtractor.hpp"
        #include "M_EKFVelocity2D.hpp"
        #include "robin_growth_policy.h"
        #include "robin_hash.h"
        #include "robin_map.h"
        #include "robin_set.h"

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionDynamicMapping_wrapper_Start_%<sfunInstanceName>(void) {
            CreateDynamicMapping();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionDynamicMapping_wrapper_Output_%<sfunInstanceName>(const %<uint32Type> u1, const %<singleType>* u2, const %<singleType>* u3, const %<singleType>* u4, const %<singleType>* u5, const %<doubleType>* u6, const %<uint32Type> u7, const %<doubleType> u8, const %<doubleType> u9, const %<doubleType>* u10, const %<doubleType> u11, const %<uint32Type> u12, const %<uint32Type> u13, const %<doubleType> u14, const %<doubleType> u15, const %<doubleType> u16, const %<doubleType> u17, const %<doubleType> u18, const %<doubleType> u19, const %<doubleType> u20,  %<doubleType>* y1,  %<uint32Type> y2,  %<doubleType>* y3,  %<uint32Type> y4,  %<int32Type>* y5,  %<int32Type>* y6,  %<int32Type>* y7,  %<int32Type>* y8,  %<int32Type>* y9) {
            OutputDynamicMapping((%<uint32Type>)(u1), (%<singleType>*)(u2), (%<singleType>*)(u3), (%<singleType>*)(u4), (%<singleType>*)(u5), (%<doubleType>*)(u6), (%<uint32Type>)(u7), (%<doubleType>)(u8), (%<doubleType>)(u9), (%<doubleType>*)(u10), (%<doubleType>)(u11), (%<uint32Type>)(u12), (%<uint32Type>)(u13), (%<doubleType>)(u14), (%<doubleType>)(u15), (%<doubleType>)(u16), (%<doubleType>)(u17), (%<doubleType>)(u18), (%<doubleType>)(u19), (%<doubleType>)(u20), y1, y2, y3, y4, y5, y6, y7, y8, y9);
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %if IsModelReferenceSimTarget() && !::GenCPP
        extern "C" {
        %endif
        void SFunctionDynamicMapping_wrapper_Terminate_%<sfunInstanceName>(void) {
            DeleteDynamicMapping();
        }
        %if IsModelReferenceSimTarget() && !::GenCPP
        }
        %endif

        %closefile cFile

        %<LibAddToCommonIncludes("%<hFileName>.h")>
        %if IsModelReferenceSimTarget()
            %<SLibAddToStaticSources("%<cFileName>.cpp")>
        %else
            %<LibAddToModelSources("%<cFileName>")>
        %endif
    %else
        %<LibBlockSetIsExpressionCompliant(block)>
    %endif
%endfunction

%% Function: Start ========================================================
%function Start (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionDynamicMapping_wrapper_Start_%<sfunInstanceName>();
        
        }
    %else
        %% 
        CreateDynamicMapping();
    %endif
%endfunction

%% Function: Outputs ======================================================
%function Outputs (block, system) Output
    %assign singleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_SINGLE)
    %assign doubleType = LibGetDataTypeNameFromId(::CompiledModel.tSS_DOUBLE)
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign u3_ptr = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u4_ptr = LibBlockInputSignalAddr(3, "", "", 0)
        %assign u5_ptr = LibBlockInputSignalAddr(4, "", "", 0)
        %assign u6_ptr = LibBlockInputSignalAddr(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_ptr = LibBlockInputSignalAddr(9, "", "", 0)
        %assign u11_val = LibBlockInputSignal(10, "", "", 0)
        %assign u12_val = LibBlockInputSignal(11, "", "", 0)
        %assign u13_val = LibBlockInputSignal(12, "", "", 0)
        %assign u14_val = LibBlockInputSignal(13, "", "", 0)
        %assign u15_val = LibBlockInputSignal(14, "", "", 0)
        %assign u16_val = LibBlockInputSignal(15, "", "", 0)
        %assign u17_val = LibBlockInputSignal(16, "", "", 0)
        %assign u18_val = LibBlockInputSignal(17, "", "", 0)
        %assign u19_val = LibBlockInputSignal(18, "", "", 0)
        %assign u20_val = LibBlockInputSignal(19, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_val = LibBlockOutputSignal(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_val = LibBlockOutputSignal(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionDynamicMapping_wrapper_Output_%<sfunInstanceName>(%<u1_val>, %<u2_ptr>, %<u3_ptr>, %<u4_ptr>, %<u5_ptr>, %<u6_ptr>, %<u7_val>, %<u8_val>, %<u9_val>, %<u10_ptr>, %<u11_val>, %<u12_val>, %<u13_val>, %<u14_val>, %<u15_val>, %<u16_val>, %<u17_val>, %<u18_val>, %<u19_val>, %<u20_val>, %<y1_ptr>, %<y2_val>, %<y3_ptr>, %<y4_val>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>);
        
        }
    %else
        %assign u1_val = LibBlockInputSignal(0, "", "", 0)
        %assign u2_ptr = LibBlockInputSignalAddr(1, "", "", 0)
        %assign u3_ptr = LibBlockInputSignalAddr(2, "", "", 0)
        %assign u4_ptr = LibBlockInputSignalAddr(3, "", "", 0)
        %assign u5_ptr = LibBlockInputSignalAddr(4, "", "", 0)
        %assign u6_ptr = LibBlockInputSignalAddr(5, "", "", 0)
        %assign u7_val = LibBlockInputSignal(6, "", "", 0)
        %assign u8_val = LibBlockInputSignal(7, "", "", 0)
        %assign u9_val = LibBlockInputSignal(8, "", "", 0)
        %assign u10_ptr = LibBlockInputSignalAddr(9, "", "", 0)
        %assign u11_val = LibBlockInputSignal(10, "", "", 0)
        %assign u12_val = LibBlockInputSignal(11, "", "", 0)
        %assign u13_val = LibBlockInputSignal(12, "", "", 0)
        %assign u14_val = LibBlockInputSignal(13, "", "", 0)
        %assign u15_val = LibBlockInputSignal(14, "", "", 0)
        %assign u16_val = LibBlockInputSignal(15, "", "", 0)
        %assign u17_val = LibBlockInputSignal(16, "", "", 0)
        %assign u18_val = LibBlockInputSignal(17, "", "", 0)
        %assign u19_val = LibBlockInputSignal(18, "", "", 0)
        %assign u20_val = LibBlockInputSignal(19, "", "", 0)
        %assign y1_ptr = LibBlockOutputSignalAddr(0, "", "", 0)
        %assign y2_val = LibBlockOutputSignal(1, "", "", 0)
        %assign y3_ptr = LibBlockOutputSignalAddr(2, "", "", 0)
        %assign y4_val = LibBlockOutputSignal(3, "", "", 0)
        %assign y5_ptr = LibBlockOutputSignalAddr(4, "", "", 0)
        %assign y6_ptr = LibBlockOutputSignalAddr(5, "", "", 0)
        %assign y7_ptr = LibBlockOutputSignalAddr(6, "", "", 0)
        %assign y8_ptr = LibBlockOutputSignalAddr(7, "", "", 0)
        %assign y9_ptr = LibBlockOutputSignalAddr(8, "", "", 0)
        %% 
        OutputDynamicMapping(%<u1_val>, (%<singleType>*)%<u2_ptr>, (%<singleType>*)%<u3_ptr>, (%<singleType>*)%<u4_ptr>, (%<singleType>*)%<u5_ptr>, (%<doubleType>*)%<u6_ptr>, %<u7_val>, %<u8_val>, %<u9_val>, (%<doubleType>*)%<u10_ptr>, %<u11_val>, %<u12_val>, %<u13_val>, %<u14_val>, %<u15_val>, %<u16_val>, %<u17_val>, %<u18_val>, %<u19_val>, %<u20_val>, %<y1_ptr>, %<y2_val>, %<y3_ptr>, %<y4_val>, %<y5_ptr>, %<y6_ptr>, %<y7_ptr>, %<y8_ptr>, %<y9_ptr>);
    %endif
%endfunction

%% Function: Terminate ====================================================
%function Terminate (block, system) Output
    %if IsModelReferenceSimTarget() || CodeFormat=="S-Function" || ::isRAccel
        %% 
        /* %<Type> (%<ParamSettings.FunctionName>): %<Name> */
        {
            %assign sfunInstanceName = FEVAL("matlab.lang.makeValidName", block.Identifier)
            SFunctionDynamicMapping_wrapper_Terminate_%<sfunInstanceName>();
        
        }
    %else
        %% 
        DeleteDynamicMapping();
    %endif
%endfunction

%% [EOF]
